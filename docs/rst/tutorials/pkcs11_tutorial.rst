.. _vulcanexus_pkcs11_tutorial:

ROS 2 Security improved with Hardware Security Modules (HSM) using Vulcanexus Core
==========================================================================================

.. contents:: Table of Contents
    :depth: 2
    :local:
    :backlinks: none

Background
----------

`ROS 2 Security <https://docs.ros.org/en/humble/Concepts/About-Security.html>`_ is implemented by means of the `DDS Security specification <https://www.omg.org/spec/DDS-SECURITY/About-DDS-SECURITY/>`_.
The security files required by the aforementioned specification are encapsulated within the ROS 2 security enclaves.
This approach allows to set different security policies for different nodes, processes, users, or devices by defining different enclaves with the corresponding permissions.
However, ROS 2 currently requires that the private key used to encrypt and decrypt the enclave information is also stored within the enclave, which might be a security vulnerability.
Hardware Security Modules (HSM) can be used in order to mitigate this vulnerability and PKCS #11 standard provides an API to interact with these devices.
Vulcanexus Core provides the required support for HSM devices so the private key, instead of being stored in the filesystem, it could be inside the HSM device.

This tutorial provides step-by-step instructions to improve ROS 2 Security of a talker/listener demo with HSM using Vulcanexus Core.

Prerequisites
-------------

This tutorial does not require a physical HSM device connected to the test environment.
Instead, a software HSM emulator is going to be installed and used to run this tutorial.

Run the following commands to install the required packages:

.. code-block:: bash

    sudo apt update && apt install --yes --no-install-recommends \
      softhsm2 \
      gnutls-bin

Please, also remember to source the environment in every terminal in this tutorial.

.. code-block:: bash

    source /opt/vulcanexus/humble/setup.bash

ROS 2 Security infrastructure
-----------------------------

First of all the required security enclave to run this tutorial has to be generated using the ROS 2 CLI.
ROS 2 enclaves are saved within a keystore generated running the following commands:

.. code-block:: bash

    mkdir vulcanexus_hsm_ws && cd vulcanexus_hsm_ws
    ros2 security create_keystore vulcanexus_demo_keystore
    ros2 security create_enclave vulcanexus_demo_keystore /talker_listener

For more information about ROS 2 security infrastructure, please refer to `this tutorial <https://docs.ros.org/en/rolling/Tutorials/Advanced/Security/The-Keystore.html>`_.

Generate HSM token
------------------

The private key that has been generated by ROS 2 CLI is going to be substituted by a virtual HSM using PKCS #11.
Therefore, the ``key.pem`` auto-generated file within the enclave is going to be replaced by a ``key.p11`` file with the PKCS #11 URI.
As already explained, this tutorial emulates the HSM using ``softHSM``.
Generate the HSM token running:

.. code-block:: bash

    softhsm2-util --init-token --free --label vulcanexus_demo --pin VulcanexusDemo --so-pin vulcanexus_demo

As the private key has already been generated by ROS 2 CLI, this demo is going to directly import this key into the HSM token.

.. code-block:: bash

    softhsm2-util --import vulcanexus_demo_keystore/enclaves/talker_listener/key.pem --token vulcanexus_demo --label key --pin VulcanexusDemo --id 123456789ABCDEF123456789ABCDEF

Once the token has been initialized, the auto-generated private key can be removed from the filesystem.

.. code-block:: bash

    rm -rf vulcanexus_demo_keystore/enclaves/talker_listener/key.pem

The PKCS #11 URI with the HSM information has to be stored in the ``key.p11`` file.
When inquiring the HSM emulator for the stored tokens, the pin is going to be required.
Either set the ``GNUTLS_PIN`` environment variable with the pin or enter it when asked by the tool.

.. code-block:: bash

    GNUTLS_PIN=VulcanexusDemo p11tool --provider /usr/lib/softhsm/libsofthsm2.so --list-all --login | grep "type=private" | awk '{print $2}' > vulcanexus_demo_keystore/enclaves/talker_listener/key.p11

The previous command already extracts the required URI and directly saves it to the file automatically.
However, the pin has not been included into the URI.
Two options can be followed: either use the ``FASTDDS_PKCS11_PIN`` environment variable or modify the ``key.p11`` file to include the pin within the URI.

For this later approach, open the ``key.p11`` file and add at the end ``?pin-value=VulcanexusDemo``.

Execute ROS 2 demo nodes with security
--------------------------------------

Security in ROS 2 is enabled by means of environment variables as explained in `ROS 2 documentation <https://design.ros2.org/articles/ros2_dds_security.html>`_.
Remember to correctly setup your environment in each terminal.

.. code-block:: bash

    export ROS_SECURITY_KEYSTORE=[path_to_workspace]/vulcanexus_demo_keystore
    export ROS_SECURITY_ENABLE=true
    export ROS_SECURITY_STRATEGY=Enforce

The latest environment variable ensures that if the security files are not correct ROS 2 will not be initialized.

If the pin is not included in the PKCS #11 URI, then remember to also export the following environment variable:

.. code-block:: bash

    export FASTDDS_PKCS11_PIN=VulcanexusDemo

Please, remember to also source Vulcanexus installation before launching the following commands.

In the first terminal launch the talker:

.. code-block:: bash

    ros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener

In the second terminal launch the listener:

.. code-block:: bash

    ros2 run demo_nodes_cpp listener --ros-args --enclave /talker_listener

Communication between both nodes is established.

If a second listener is launched in a third terminal without security (do not set the environment variables but remember to source Vulcanexus installation), this node will not be included into the communication.

.. code-block:: bash

    ros2 run demo_nodes_cpp listener
