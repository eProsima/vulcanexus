# -*- coding: utf-8 -*-
#
# sphynx-demo documentation build configuration file, created by
# sphinx-quickstart on Tue Aug  2 16:48:54 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import sys
# sys.path.insert(0, os.path.abspath('.'))
import itertools
import json
import os
import pathlib
import requests

from docutils.parsers.rst import Directive


def download_json():
    """
    Download the common theme options of eProsima readthedocs documentation.
    The theme options are defined in a JSON file that is hosted in the eProsima GitHub
    repository with the index of all eProsima product documentation
    (https://github.com/eProsima/all-docs).
    :return: dictionary.
    """
    url = "https://raw.githubusercontent.com/eProsima/all-docs/master/source/_static/json/eprosima-furo.json"
    ret = dict()
    try:
        req = requests.get(url, allow_redirects=True, timeout=10)
    except requests.RequestException as e:
        print(
            "Failed to download the JSON with the eProsima theme."
            "Request Error: {}".format(e)
        )
        return ret
    if req.status_code != 200:
        print(
            "Failed to download the JSON with the eProsima theme."
            "Return code: {}".format(req.status_code)
        )
        return ret
    ret = json.loads(req.content)
    return ret


def retrieve_custom_sidebar(root_dir):
    """
    Generate the custom sidebar, downloading necessary custom files.
    Custom files are hosted in the eProsima GitHub repository with the index of all eProsima product documentation
    (https://github.com/eProsima/all-docs).
    :return: Custom sidebars if the file was downloaded and generated successfully.
        Readthedocs default ones if not.
    """
    url = "https://raw.githubusercontent.com/eProsima/all-docs/master/source/_templates/sidebar/commercial-support.html"
    url_img = "https://raw.githubusercontent.com/eProsima/all-docs/master/source/_static/eprosima-logo-white.png"
    ret = {
        "**": [
            "sidebar/brand.html",
            "sidebar/search.html",
            "sidebar/scroll-start.html",
            "sidebar/navigation.html",
            "sidebar/ethical-ads.html",
            "sidebar/scroll-end.html",
            "sidebar/variant-selector.html",
        ]
    }
    if not os.path.isfile(
        "{}/_templates/sidebar/commercial-support.html".format(root_dir)
    ):
        try:
            req = requests.get(url, allow_redirects=True, timeout=10)
        except requests.RequestException as e:
            print(
                "Failed to download the HTML with the eProsima commecial support button."
                "Request Error: {}".format(e)
            )
            return ret
        if req.status_code != 200:
            print(
                "Failed to download the HTML with the eProsima commercial support button."
                "Return code: {}".format(req.status_code)
            )
            return ret
        os.makedirs(
            os.path.dirname("{}/_templates/sidebar/".format(root_dir)),
            exist_ok=True,
        )
        html_path = "{}/_templates/sidebar/commercial-support.html".format(root_dir)
        with open(html_path, "w") as f:
            content = req.content.decode("utf-8").replace(
                "02-formalia/titlepage", "index"
            )
            try:
                f.write(content)
            except OSError:
                print("Failed to create the file: {}".format(html_path))
                return ret

    if not os.path.isfile("{}/_static/eprosima-logo-white.png".format(root_dir)):
        try:
            req = requests.get(url_img, allow_redirects=True, timeout=10)
        except requests.RequestException as e:
            print(
                "Failed to download the image for the eProsima commecial support button."
                "Request Error: {}".format(e)
            )
            return ret
        if req.status_code != 200:
            print(
                "Failed to download the image for the eProsima commercial support button."
                "Return code: {}".format(req.status_code)
            )
            return ret
        img_path = "{}/_static/eprosima-logo-white.png".format(root_dir)
        with open(img_path, "wb") as f:
            try:
                f.write(req.content)
            except OSError:
                print("Failed to create the file: {}".format(img_path))
                return ret
    ret = {
        "**": [
            "sidebar/brand.html",
            "sidebar/commercial-support.html",
            "sidebar/search.html",
            "sidebar/scroll-start.html",
            "sidebar/navigation.html",
            "sidebar/ethical-ads.html",
            "sidebar/scroll-end.html",
            "sidebar/variant-selector.html",
        ]
    }
    return ret


def download_css(html_css_dir):
    """
    Download the common theme of eProsima readthedocs documentation.

    The theme is defined in a CSS file that is hosted in the eProsima GitHub
    repository with the index of all eProsima product documentation
    (https://github.com/eProsima/all-docs).

    :param html_css_dir: The directory to save the CSS stylesheet.
    :return: True if the file was downloaded and generated successfully.
        False if not.
    """
    url = "https://raw.githubusercontent.com/eProsima/all-docs/master/source/_static/css/eprosima-furo.css"
    try:
        req = requests.get(url, allow_redirects=True, timeout=10)
    except requests.RequestException as e:
        print(
            "Failed to download the CSS with the eProsima rtd theme."
            "Request Error: {}".format(e)
        )
        return False
    if req.status_code != 200:
        print(
            "Failed to download the CSS with the eProsima rtd theme."
            "Return code: {}".format(req.status_code)
        )
        return False
    os.makedirs(os.path.dirname("{}/_static/css/".format(html_css_dir)), exist_ok=True)
    theme_path = "{}/_static/css/eprosima-furo.css".format(html_css_dir)
    with open(theme_path, "wb") as f:
        try:
            f.write(req.content)
        except OSError:
            print("Failed to create the file: {}".format(theme_path))
            return False
    return True


def select_css(html_css_dir):
    """
    Select CSS file with the website's template.

    :param html_css_dir: The directory to save the CSS stylesheet.
    :return: Returns a list of CSS files to be imported.
    """
    ret = ""
    common_css = "css/eprosima-furo.css"
    if download_css(html_css_dir):
        print("Applying common CSS style file: {}".format(common_css))
        ret = common_css

    return ret


script_path = os.path.abspath(pathlib.Path(__file__).parent.absolute())
# Project directories
project_source_docs_dir = os.path.abspath("{}/rst".format(script_path))

macros = {
    "DISTRO": "jazzy",
    "DISTRO_TITLE": "jazzy",
    "DISTRO_TITLE_FULL": "Jazzy Jolo",
    "REPOS_FILE_BRANCH": "jazzy",
    "FASTDDS_BRANCH": "v3.1.0",
}

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "notfound.extension",
    "sphinx_sitemap",
    "sphinx_copybutton",
    "sphinx_design",
    "sphinx.ext.graphviz",
    "sphinx.ext.ifconfig",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinxcontrib.plantuml",
]

try:
    import sphinxcontrib.spelling  # noqa: F401

    extensions.append("sphinxcontrib.spelling")

    spelling_word_list_filename = [
        "rst/spelling_wordlist.txt",
        "ros2_docs_spelling_wordlist.txt",
    ]

    from sphinxcontrib.spelling.filters import ContractionFilter

    spelling_filters = [ContractionFilter]
    spelling_ignore_contributor_names = False
except ImportError:
    pass

plantuml = "/usr/bin/plantuml -Djava.awt.headless=true "
plantuml_output_format = "svg"

# Add any paths that contain templates here, relative to this directory.
templates_path = ["rst/_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The encoding of source files.
#
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "Vulcanexus"
copyright = "2022, eProsima"
author = "eProsima"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = "1.0.0"
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#
# today = ''
#
# Else, today_fmt is used as the format for a strftime call.
#
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = [
    "*/includes/*.rst",
    "*/*/includes/*.rst",
    "*/*/*/includes/*.rst",
    "*/*/*/*/includes/*.rst",
    "**/_*.rst",
]

# The reST default role (used for this markup: `text`) to use for all
# documents.
#
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#
# show_authors = False

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False

suppress_warnings = [
    "cpp.duplicate_declaration",
    "cpp.parse_function_declaration",
    "image.nonlocal_uri",
]

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "furo"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.


# Add any paths that contain custom themes here, relative to this directory.
html_theme_options = {}
html_theme_options.update(download_json())

html_use_smartypants = True

html_css_files = [select_css(project_source_docs_dir)]

# The name for this set of Sphinx documents.
# "<project> v<release> documentation" by default.
#
html_title = "<i></i>"

# A shorter title for the navigation bar.  Default is the same as html_title.
#
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.

html_logo = "rst/_static/css/imgs/vulcanexus_logo1_white_stroke.png"

# The name of an image file (relative to this directory) to use as a favicon of
# the docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.

html_favicon = "rst/_static/css/imgs/vulcanexus_icon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["rst/_static"]

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#
# html_extra_path = []

# If not None, a 'Last updated on:' timestamp is inserted at every page
# bottom, using the given strftime format.
# The empty string is equivalent to '%b %d, %Y'.
#
# html_last_updated_fmt = None

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#
html_sidebars = retrieve_custom_sidebar(project_source_docs_dir)

# Additional templates that should be rendered to pages, maps page names to
# template names.
#
# html_additional_pages = {}

# If false, no module index is generated.
#
# html_domain_indices = True

# If false, no index is generated.
#
# html_use_index = True

# If true, the index is split into individual pages for each letter.
#
# html_split_index = False

# If true, links to the reST sources are added to the pages.
#
# html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.

html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr', 'zh'
#
# html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# 'ja' uses this config value.
# 'zh' user can custom change `jieba` dictionary path.
#
# html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#
# html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = "Vulcanexus Documentation"

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "vulcanexus.tex", "Vulcanexus Documentation", "eProsima", "manual"),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#
# latex_logo = 01-figures/logo.png

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#
# latex_use_parts = False

# If true, show page references after internal links.
#
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
#
# latex_show_urls = False

# Documents to append as an appendix to all manuals.
#
# latex_appendices = []

# It false, will not define \strong, \code, 	itleref, \crossref ... but only
# \sphinxstrong, ..., \sphinxtitleref, ... To help avoid clash with user added
# packages.
#
# latex_keep_old_macro_names = True

# If false, no module index is generated.
#
# latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "Vulcanexus", "Vulcanexus Documentation", [author], 1)]

# If true, show URL addresses after external links.
#
# man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "Vulcanexus",
        "Vulcanexus Documentation",
        author,
        "Vulcanexus",
        "Documentation of eProsima Vulcanexus",
        "Miscellaneous",
    ),
]

# Documents to append as an appendix to all manuals.
#
# texinfo_appendices = []

# If false, no module index is generated.
#
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#
# texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#
# texinfo_no_detailmenu = False


class RedirectFrom(Directive):
    has_content = True
    template_name = "layout.html"
    redirections = {}

    @classmethod
    def register(cls, app):
        app.connect("html-collect-pages", cls.generate)
        app.add_directive("redirect-from", cls)
        return app

    @classmethod
    def generate(cls, app):
        from sphinx.builders.html import StandaloneHTMLBuilder

        if not isinstance(app.builder, StandaloneHTMLBuilder):
            return

        redirect_html_fragment = """
            <link rel="canonical" href="{base_url}/{url}" />
            <meta http-equiv="refresh" content="0; url={url}" />
            <script>
                window.location.href = '{url}';
            </script>
        """
        redirections = {
            os.path.splitext(os.path.relpath(document_path, app.srcdir))[
                0
            ]: redirect_urls
            for document_path, redirect_urls in cls.redirections.items()
        }
        redirection_conflict = next(
            (
                (canon_1, canon_2, redirs_1.intersection(redirs_2))
                for (canon_1, redirs_1), (canon_2, redirs_2) in itertools.combinations(
                    redirections.items(), 2
                )
                if redirs_1.intersection(redirs_2)
            ),
            None,
        )
        if redirection_conflict:
            canonical_url_1, canonical_url_2 = redirection_conflict[:2]
            conflicting_redirect_urls = redirection_conflict[-1]
            raise RuntimeError(
                "Documents {} and {} define conflicting redirects: {}".format(
                    canonical_url_1, canonical_url_2, conflicting_redirect_urls
                )
            )
        all_canonical_urls = set(redirections.keys())
        all_redirect_urls = {
            redirect_url
            for redirect_urls in redirections.values()
            for redirect_url in redirect_urls
        }
        conflicting_urls = all_canonical_urls.intersection(all_redirect_urls)
        if conflicting_urls:
            raise RuntimeError(
                "Some redirects conflict with existing documents: {}".format(
                    conflicting_urls
                )
            )

        for canonical_url, redirect_urls in redirections.items():
            for redirect_url in redirect_urls:
                context = {
                    "canonical_url": os.path.relpath(canonical_url, redirect_url),
                    "title": os.path.basename(redirect_url),
                    "metatags": redirect_html_fragment.format(
                        base_url=app.config.html_baseurl,
                        url=app.builder.get_relative_uri(redirect_url, canonical_url),
                    ),
                }
                yield (redirect_url, context, cls.template_name)

    def run(self):
        document_path = self.state.document.current_source
        if document_path not in RedirectFrom.redirections:
            RedirectFrom.redirections[document_path] = set()
        RedirectFrom.redirections[document_path].update(self.content)
        return []


def expand_macros(app, docname, source):
    result = source[0]
    for key, value in app.config.macros.items():
        result = result.replace(f"{{{key}}}", value)
    source[0] = result


def setup(app):
    app.connect("source-read", expand_macros)
    app.add_config_value("macros", {}, True)
    RedirectFrom.register(app)
